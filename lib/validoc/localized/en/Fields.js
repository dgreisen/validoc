// Generated by CoffeeScript 1.9.1

/*
Validators specific to United States
 */

(function() {
  var USAddressField, USPSChoicesField, USPhoneNumberField, USSocialSecurityNumberField, USStateChoiceField, USStateField, USZipCodeField, ValidationError, _, base, fields, us_states, utils, validators,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  if (typeof exports !== "undefined" && exports !== null) {
    utils = require("../../utils");
    fields = require("../../Fields");
    require('./us_states');
    validators = require("../../Validators");
    _ = require('underscore');
  } else if (typeof window !== "undefined" && window !== null) {
    utils = window.validoc.utils;
    fields = window.validoc.fields;
    validators = window.validoc.validators;
    us_states = window.validoc.fields.local.en.us_states;
    _ = window._;
  }

  us_states = fields.local.en.us_states;

  ValidationError = utils.ValidationError;

  USZipCodeField = (function(superClass) {
    extend(USZipCodeField, superClass);

    function USZipCodeField() {
      return USZipCodeField.__super__.constructor.apply(this, arguments);
    }

    USZipCodeField.prototype.errorMessages = {
      invalid: utils._i('Enter a zip code in the format XXXXX or XXXXX-XXXX.')
    };

    USZipCodeField.prototype.regex = /^\d{5}(?:-\d{4})?$/;

    return USZipCodeField;

  })(fields.RegexField);

  USPhoneNumberField = (function(superClass) {
    extend(USPhoneNumberField, superClass);

    function USPhoneNumberField() {
      return USPhoneNumberField.__super__.constructor.apply(this, arguments);
    }

    USPhoneNumberField.prototype.errorMessages = {
      invalid: utils._i('Phone numbers must be in XXX-XXX-XXXX format.')
    };

    USPhoneNumberField.prototype.regex = /^(?:1-?)?(\d{3})[-\.]?(\d{3})[-\.]?(\d{4})$/;

    USPhoneNumberField.prototype.validate = function(value) {
      var match;
      value = USPhoneNumberField.__super__.validate.call(this, value);
      value = value.replace(/(\(|\)|\s+)/g, '');
      match = value.match(this.regex);
      if (match) {
        value = utils.interpolate("%s-%s-%s", match.slice(1));
        this.setValue(value);
      } else {
        throw ValidationError(this.errorMessages.invalid, "invalid");
      }
      return value;
    };

    return USPhoneNumberField;

  })(fields.Field);

  USSocialSecurityNumberField = (function(superClass) {
    extend(USSocialSecurityNumberField, superClass);

    function USSocialSecurityNumberField() {
      return USSocialSecurityNumberField.__super__.constructor.apply(this, arguments);
    }


    /*
    A United States Social Security number.
    
    Checks the following rules to determine whether the number is valid:
    
        * Conforms to the XXX-XX-XXXX format.
        * No group consists entirely of zeroes.
        * The leading group is not "666" (block "666" will never be allocated).
        * The number is not in the promotional block 987-65-4320 through
          987-65-4329, which are permanently invalid.
        * The number is not one known to be invalid due to otherwise widespread
          promotional use or distribution (e.g., the Woolworth's number or the
          1962 promotional number).
     */

    USSocialSecurityNumberField.prototype.errorMessages = {
      invalid: utils._i('Enter a valid U.S. Social Security number in XXX-XX-XXXX format.')
    };

    USSocialSecurityNumberField.prototype.regex = /^(\d{3})[-\ ]?(\d{2})[-\ ]?(\d{4})$/;

    USSocialSecurityNumberField.prototype.validate = function(value) {
      var area, group, invalidEM, match, serial;
      value = USSocialSecurityNumberField.__super__.validate.call(this, value);
      match = value.match(this.regex);
      invalidEM = this.errorMessages['invalid'];
      if (!match) {
        throw ValidationError(this.errorMessages.invalid, "invalid");
      }
      area = match[1];
      group = match[2];
      serial = match[3];
      if (area === '000' || group === '00' || serial === '0000') {
        throw ValidationError(this.errorMessages.invalid, "invalid");
      }
      if (area === '666' || (area === '987' && group === '65' && 4320 <= int(serial) && int(serial) <= 4329) || value === '078-05-1120' || value === '219-09-9999') {
        throw ValidationError(this.errorMessages.invalid, "invalid");
      }
      value = utils.interpolate('%s-%s-%s', [area, group, serial]);
      this.setValue(value);
      return value;
    };

    return USSocialSecurityNumberField;

  })(fields.Field);

  USStateField = (function(superClass) {
    extend(USStateField, superClass);

    function USStateField() {
      return USStateField.__super__.constructor.apply(this, arguments);
    }


    /*
    A form field that validates its input is a U.S. state name or abbreviation.
    It normalizes the input to the standard two-leter postal service
    abbreviation for the given state.
    
    `"localized/en/us_states.js"` must be in your packages.js file.
     */

    USStateField.prototype.errorMessages = {
      invalid: utils._i('Enter a U.S. state or territory.')
    };

    USStateField.prototype.validate = function(value) {
      value = USStateField.__super__.validate.call(this, value);
      value = utils.strip(value).toLowerCase();
      value = us_states.STATES_NORMALIZED[value];
      if (value) {
        this.setValue(value);
      } else {
        throw ValidationError(this.errorMessages.invalid, "invalid");
      }
      return value;
    };

    return USStateField;

  })(fields.Field);

  USStateChoiceField = (function(superClass) {
    extend(USStateChoiceField, superClass);

    function USStateChoiceField() {
      return USStateChoiceField.__super__.constructor.apply(this, arguments);
    }

    USStateChoiceField.prototype.choices = us_states.STATE_CHOICES;

    return USStateChoiceField;

  })(fields.ChoiceField);

  USPSChoicesField = (function(superClass) {
    extend(USPSChoicesField, superClass);

    function USPSChoicesField() {
      return USPSChoicesField.__super__.constructor.apply(this, arguments);
    }

    USPSChoicesField.prototype.choices = us_states.USPS_CHOICES;

    return USPSChoicesField;

  })(fields.ChoiceField);

  USAddressField = (function(superClass) {
    extend(USAddressField, superClass);

    USAddressField.prototype.stateFieldType = "USStateField";

    USAddressField.prototype.streetLines = 1;

    USAddressField.prototype.errorMessages = {
      invalid: utils._i('Enter a valid address.')
    };

    USAddressField.prototype.streetField = {
      name: "street",
      field: "CharField",
      maxLength: 200,
      widget: {
        label: "Street",
        size: 4
      }
    };

    USAddressField.prototype.cityField = {
      name: "city",
      field: "CharField",
      maxLength: 50,
      widget: {
        label: "City",
        size: 2
      }
    };

    USAddressField.prototype.zipField = {
      name: "zip",
      field: "local.en.USZipCodeField",
      widget: {
        label: "Zip",
        size: 1
      }
    };

    USAddressField.prototype.statePrefix = "local.en.";

    function USAddressField(opts) {
      var i, j, label, ref, street;
      opts.schema = [];
      for (i = j = 1, ref = this.streetLines; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        street = _.clone(this.streetField);
        street.name = street.name + i;
        label = i > 1 ? " " + i : "";
        street.widget.label = street.widget.label + label;
        opts.schema.push(street);
      }
      opts.schema.push(this.cityField);
      opts.schema.push({
        name: "state",
        field: this.statePrefix + this.stateFieldType,
        widget: {
          label: "State",
          size: 1
        }
      });
      opts.schema.push(this.zipField);
      USAddressField.__super__.constructor.call(this, opts);
    }

    return USAddressField;

  })(fields.ContainerField);

  if (fields.local == null) {
    fields.local = {};
  }

  if ((base = fields.local).en == null) {
    base.en = {};
  }

  _.extend(fields.local.en, {
    USZipCodeField: USZipCodeField,
    USPhoneNumberField: USPhoneNumberField,
    USSocialSecurityNumberField: USSocialSecurityNumberField,
    USStateField: USStateField,
    USStateChoiceField: USStateChoiceField,
    USPSChoicesField: USPSChoicesField,
    USAddressField: USAddressField
  });

  if (typeof exports !== "undefined" && exports !== null) {
    module.exports = fields;
  }

}).call(this);
