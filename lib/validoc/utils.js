// Generated by CoffeeScript 1.9.1

/*
These function are used throughout the library. Many provide cross-platform (server and browser)
support for frequently-used functions.
 */

(function() {
  var ValidationError, _, _i, interpolate, isHash, objPop, strip, utils,
    slice = [].slice;

  if (typeof exports !== "undefined" && exports !== null) {
    _ = require("underscore");
  }

  _i = function(s) {
    return s;
  };

  interpolate = function(s, args) {

    /*
    simple string interpolation (thanks http:#djangosnippets.org/snippets/2074/)
    interpolate("%s %s", ["hello", "world"]) returns "hello world"
     */
    var i;
    i = 0;
    return s.replace(/%(?:\(([^)]+)\))?([%diouxXeEfFgGcrs])/g, function(match, v, t) {
      if (t === "%") {
        return "%";
      }
      return args[v || i++];
    });
  };

  ValidationError = function() {
    var args, code, message;
    message = arguments[0], code = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];

    /*
    raised by fields during validation
     * `message`:  the default error message to display
     * `code`: the code used to look up an overriding message in the `errorMessages` hash
     * `args...`: arguments used for interpolation with the error message.
     */
    return {
      message: message,
      code: code,
      data: args
    };
  };

  strip = function(str) {

    /* remove leading and trailing white space */
    return String(str).replace(/^\s*|\s*$/g, '');
  };

  objPop = function(obj, key) {
    var out;
    out = obj[key];
    if (out != null) {
      delete obj[key];
    }
    return out;
  };

  isHash = function(obj) {
    return _.isObject(obj) && !_.isArray(obj);
  };

  utils = {
    _i: _i,
    interpolate: interpolate,
    ValidationError: ValidationError,
    strip: strip,
    objPop: objPop,
    isHash: isHash
  };

  if (typeof window !== "undefined" && window !== null) {
    window.validoc = {
      utils: utils
    };
  } else if (typeof exports !== "undefined" && exports !== null) {
    module.exports = utils;
  }

}).call(this);
